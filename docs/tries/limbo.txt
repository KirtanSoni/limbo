
import (
	"fmt"
	"net/http"
)

var (
	MAX_PLAYERS_PER_ROOM int = 5
)

// type Client struct{
// 	ws *websocket.Conn
// 	buf chan []byte
// }

type Room1 struct {
	Code    string
	Clients []*Client

	join  chan *Client
	leave chan *Client
	wsEve chan []byte
}

func PrintAllRooms(w http.ResponseWriter, r *http.Request) {
	fmt.Print(allrooms)
	fmt.Print(len(allrooms))
}

func CreateRoom(code string, userID string) *Room {
	clients := make([]*Client, MAX_PLAYERS_PER_ROOM)
	res := Room{
		Code:    code,
		Clients: clients,
		join:    make(chan *Client),
		leave:   make(chan *Client),
	}
	return &res
}

func ServeFrontend(w http.ResponseWriter, r *http.Request) {

}

func CreateNewRoom(w http.ResponseWriter, r *http.Request) {
	generate_id := "room-code-generated"
	user_id := "userID"
	allrooms[generate_id] = CreateRoom(generate_id, user_id)
}

var (
	allrooms = make(map[string]*Room, 0)
)

func mai() {
	fmt.Println("Starting Server...")

	http.HandleFunc("GET /", ServeFrontend)
	http.HandleFunc("GET /create-room", CreateNewRoom)
	http.HandleFunc("GET /show", PrintAllRooms)

	err := http.ListenAndServe(":8080", nil)
	if err != nil {
		fmt.Printf("Error starting server: %s\n", err)
	}

}
